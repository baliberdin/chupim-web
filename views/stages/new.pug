extends ../layout

block stylesheets
  link(rel='stylesheet', href='/stylesheets/highlight/dracula.css')

//- block navigator
//-   include navigator

block content
  #stage-save-modal.modal(tabindex="-1" role="dialog")
    .modal-dialog(role="document")
      .modal-content
        .modal-header
          h5.modal-title Save New Stage
          button.btn-close(type="button" data-bs-dismiss="modal" aria-label="Close")
        .modal-body
          form#stage-save-form.form.needs-validation(action='/stage' method='post' novalidate)
            input(type='hidden' name='circuitBreaker.enabled')
            input(type='hidden' name='circuitBreaker.action')
            input.form-control(type='hidden' name='circuitBreaker.fn')
            .invalid-feedback Please, select a fallback function, or select do nothing on Circuit Breaker action.
            input.form-control(type='hidden' name='circuitBreaker.timeout')
            .invalid-feedback Circuit Breaker timeout is invalid.
            .form-group
              input(type='hidden' name='source' required)
              .invalid-feedback Stage has no function source.
            .form-group
              label Prefix &nbsp;
                small (just to organize stages, such as package name)
              input#stage-prefix.form-control(placeholder='query' name='prefix' value=prefix required)
              .invalid-feedback This field could not be empty
            .form-group
              label Name
              input#stage-name.form-control(placeholder='myStage' name='name' value=stage!=undefined?stage.name:"" required)
              .invalid-feedback This field could not be empty
        .modal-footer
          button.btn.btn-secondary(type="button" data-bs-dismiss="modal") Close
          button.btn.btn-primary(type="submit" form="stage-save-form") Save changes

  .col-sm
    .p-3.main-header
      h1 Stage Editor
      p Here you can create your stages on the fly.

    

    .container-fluid.flex-shrink-1
      .flex-wrap.d-flex.full-height.flex-column.scrolly
        .col-4.scrollable.p-3.full-height
          article#collapseAdvanced
            header
              h2 Circuit Breaker 
                if stage != undefined && stage.circuitbreaker && stage.circuitbreaker.enabled == true
                  input(name='cb-enabled' type="checkbox" data-toggle="toggle" data-size='mini' data-offstyle='secondary' data-onstyle='success' data-height='22' checked)
                else
                  input(name='cb-enabled' type="checkbox" data-toggle="toggle" data-size='mini' data-offstyle='secondary' data-onstyle='success' data-height='22')
              p If this stage can fail or take a long time, enable the Circuit Breaker to limit how long time to wait. 
              .form-group
                label Timeout (ms)
                input.form-control(name='cb-timeout' type='text' placeholder="1000" value=stage!=undefined&&stage.circuitbreaker&&stage.circuitbreaker.enabled?stage.circuitbreaker.timeout:"")
              .form-group
                label Fallback Action
                select#fallback-selector.form-control(name='cb-fallback-action')
                  if stage && stage.circuitbreaker && stage.circuitbreaker.enabled && stage.circuitbreaker.action == 0
                    option(value='0' selected) Do Nothing (Throw Exception)
                  else
                    option(value='0') Do Nothing (Throw Exception)
                  if stage && stage.circuitbreaker && stage.circuitbreaker.enabled && stage.circuitbreaker.action == 1
                    option(value='1' data-toggle='collapse' aria-controls='fallback-fn-collapse' selected) Fallback Function
                  else
                    option(value='1' data-toggle='collapse' aria-controls='fallback-fn-collapse') Fallback Function
              #fallback-fn-collapse.form-group.collapse
                label Fallback Function
                select.form-control(name='cb-fallback-fn')
                  option(value="")= `---`
                  for p in Object.keys(chupim.stages.container).sort()
                    if p != 'join' && p != 'register' && p != 'registerObject'
                      for s in Object.keys(chupim.stages.container[p])
                        if stage && stage.circuitbreaker && stage.circuitbreaker.fn == `${p}.${chupim.stages.container[p][s].name}`
                          option(value=`${p}.${chupim.stages.container[p][s].name}` selected)= `${p[0].toUpperCase()+p.substring(1)} / ${chupim.stages.container[p][s].name}`
                        else
                          option(value=`${p}.${chupim.stages.container[p][s].name}`)= `${p[0].toUpperCase()+p.substring(1)} / ${chupim.stages.container[p][s].name}`
            hr
          article#collapseHelp
            header
              h2 How to Code
            p Each stage must be a single javascript Async Function and must contain only one parameter, called here as 
              b context.
            pre  
              code.
                // x as context parameter
                async (x) => {
                  // TODO: Stage code here
                  return x;
                }
            p. 
              Context parameter is such a Object that carry all data through pipeline stages. This object has no fixed structure, then you can put almost anything on it. Just keep in mind some rules:
            ul
              li Context must be lightweight, because it is the API response.
              li Avoid to use data from context provided by previous stages. It makes the stages tight coupled
              li But if your stage need some data from context, remember to put it on context at previous stage.
            p.
              You can also return a promise, as long as at the end, even concluding the promise or not, you must either return the context or throw an exception
            pre  
              code.
                // x as context parameter
                async (x) => {
                  return new Promise( (resolve, reject) => {
                    /* Promise code here */
                    resolve("Some information");
                  }).then(r => {
                    /* then code here */
                    x.new_info = r;
                    return x;
                  }).catch(e => {
                    /* handle error or */
                    throw new Error(e);
                  });
                }
            h4.alert.alert-danger
              i.fas.fa-exclamation-triangle 
              |&nbsp; Never block the event loop thread!
        .col-8.full-height
          #workspace
            if stage
              pre#stage-source= `/**\n STAGE: ${stage.name} \n PACKAGE: ${stage.prefix}\n**/\n\n${stage.source}`
            else
              pre#stage-source 
                |/*
                |
                | #### Stage Editor ####
                |
                | - To Access pipeline context, use context variable.
                | - Press Ctrl+S or Command+S to save the source code.
                |
                | ### Simple Example: ###
                |async (context) => {
                |   console.log("Hello world")
                |   // Write your stage code here
                |   // Do not forget to return the context
                |   return context;
                |}
                |
                |
                | ### More complex example with http request
                |
                |async (context) => {
                |    const rest = require('../rest');
                |    return rest.get("http://localhost:8080/search?q=test", 20)
                |    .then(r => {
                |        context.response = r;
                |        return context;
                |    })
                |    .catch(e => {
                |      throw e; 
                |    });
                |}
                |
                |*/
                |

block scripts
  script(src="/javascripts/highlight/highlight.pack.js")
  script(src="/javascripts/ace/src-noconflict/ace.js" type="text/javascript" charset="utf-8")
  script(src='/javascripts/stages/main.js')